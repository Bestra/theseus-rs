extern crate git2;
extern crate docopt;

use git2::{Repository, Error, BranchType};
use docopt::Docopt;

fn main() {
    const USAGE: &'static str = "
usage: hello_world <path>
";

    let doc_args = Docopt::new(USAGE)
        .and_then(|d| d.parse())
        .and_then(|d| d.decode())
                                 .unwrap_or_else(|e| e.exit());


    let path = doc_args.get_str("<path>");
    open_repo(path);
}

fn open_repo(path: &str) -> Result<(), Error> {
    let repo = try!(Repository::open(path));
    let branch = try!(repo.find_branch("master", BranchType::Local));
    let r = branch.get().target().unwrap();

    let mut revwalk = try!(repo.revwalk());
    revwalk.set_sorting(git2::SORT_TOPOLOGICAL);
    try!(revwalk.push(r));

    for id in revwalk {
        let id = try!(id);
        let mut commit = try!(repo.find_commit(id));
        let summary = commit.summary().unwrap();
        println!("{}", summary);
    }

    Ok(())
}
